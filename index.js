const { Telegraf } = require('telegraf');
const fs = require('fs');
const { code } = require('telegraf/format');

require('dotenv').config();
console.log('‚úÖ BOT_TOKEN:', process.env.BOT_TOKEN);
const bot = new Telegraf(process.env.BOT_TOKEN); // ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –Ω–∏–∂–Ω–∏–º –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ–º




 // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
const userStates = {}; // –î–ª—è —Ö—Ä—É—Å—Ç–∞–ª—å–Ω–æ–≥–æ —à–∞—Ä–∞

const commands = JSON.parse(fs.readFileSync('./commands.json', 'utf-8'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
commands.forEach(cmd => {
  bot.command(cmd.name, (ctx) => {
    if (cmd.response === 'RANDOM_NUMBER') {
      const num = Math.floor(Math.random() * 100) + 1;
      ctx.reply(`üé≤ –¢–≤–æ–µ —á–∏—Å–ª–æ: ${num}`);
    } else {
      ctx.reply(cmd.response);
    }
  });
});

// === –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  const name = ctx.from.first_name || '–¥—Ä—É–≥';
  let message = `üëã –ü—Ä–∏–≤–µ—Ç, ${name}!\n\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n`;

  message += `/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
  commands.forEach(cmd => {
    message += `/${cmd.name} ‚Äî ${cmd.description}\n`;
  });
  message += `/shar ‚Äî –•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π\n`;

  ctx.reply(message);
});

// === /—à–∞—Ä ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–µ–Ω—Ç–∞–∫–∏–ª–æ–≤
bot.command('shar', (ctx) => {
  const userId = ctx.from.id.toString();
  const predictions = loadPredictions();

  if (predictions[userId]) {
    ctx.reply(`‚ùó –¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ${predictions[userId]}`);
  } else {
    userStates[userId] = 'awaiting_prediction';
    ctx.reply('üîÆ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–µ–Ω—Ç–∞–∫–∏–ª–æ–≤ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:');
  }
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /—à–∞—Ä
bot.on('text', (ctx) => {
  const userId = ctx.from.id.toString();

  if (userStates[userId] === 'awaiting_prediction') {
    const answer = ctx.message.text.trim();

    if (!/^\d+$/.test(answer)) {
      return ctx.reply('‚ùå –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, **—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ**.');
    }

    const predictions = loadPredictions();
    predictions[userId] = answer;
    savePredictions(predictions);
    delete userStates[userId];

    ctx.reply(`‚úÖ –ó–∞–ø–∏—Å–∞–ª: ${answer}. –£–¥–∞—á–∏!`);
  }
});

// === –†–∞–±–æ—Ç–∞ —Å predictions.json
function loadPredictions() {
  try {
    const data = fs.readFileSync('predictions.json', 'utf-8');
    return JSON.parse(data);
  } catch (e) {
    return {};
  }
}

function savePredictions(data) {
  fs.writeFileSync('predictions.json', JSON.stringify(data, null, 2));
}

// === –ó–∞–ø—É—Å–∫
bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
